use mock_sba

-- 1. Create a query to return all orders made by users with the first name of “Marion”
select o.ORDER_ID as `ORDER_ID`, u.USER_ID as `USER_ID`, s.STORE_ID as `STORE_ID` 
from orders as o
inner join users as u on o.USER_ID = u.USER_ID  
inner join stores as s on o.STORE_ID = s.STORE_ID
where U.FIRST_NAME like "MARION"
;

-- 2. Create a query to select all users that have not made an order
SELECT *
FROM users as u
WHERE u.user_id NOT IN (SELECT o.user_id FROM orders as o)
;

-- 3. Create a Query to select the names and prices of all items that have been part of 2 or more separate orders.
select i.name as `Item Name`, i.PRICE as `Item Price` 
from order_items as oi  
left join items as i on i.ITEM_ID = oi.ITEM_ID 
group by i.NAME 
having count(ORDER_ID) >= 2
;

-- 4. Create a query to return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York”. Order by Order Id in ascending order.
select oi.order_id as `Order ID`, i.name as `Item Name`, i.PRICE as `Item Price`, oi.QUANTITY as `Quantity` 
from order_items as oi
left join orders as o on oi.ORDER_ID = o.ORDER_ID 
left join stores as s on o.STORE_ID = s.STORE_ID  
left join items as i on oi.ITEM_ID = i.ITEM_ID
where s.CITY = 'New York'
;

-- 5. Your boss would like you to create a query that calculates the total revenue generated by each item. Revenue for an item can be found as (Item Price * Total Quantity Ordered). 
-- Please return the first column as ‘ITEM_NAME’ and the second column as ‘REVENUE’.
select i.NAME as `ITEM_NAME`, format(sum(total_quantity*i.PRICE), 2) as `REVENUE`
from items as i
join 
(
SELECT item_id, SUM(quantity) AS total_quantity
FROM order_items
GROUP BY item_id
) as oi on i.item_id = oi.ITEM_ID
group by i.name
order by `REVENUE`  
;

-- 6. Create a query with the following output:
-- a. Column 1 - Store Name
-- i. The name of each store
-- b. Column 2 - Order Quantity
-- i. The number of times an order has been made in this store
-- c. Column 3 - Sales Figure
-- i. If the store has been involved in more than 3 orders, mark as ‘High’
-- ii. If the store has been involved in less than 3 orders but more than 1 order, mark as ‘Medium’
-- iii. If the store has been involved with 1 or less orders, mark as ‘Low’
-- d. Should be ordered by the Order Quantity in Descending Order
select as `Store Name`
from 

select * from orders o; 
select * from users u; 
select * from stores s;
select * from order_items oi;
select * from items i;
